apply plugin: 'java-library'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-test-fixtures'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'
apply plugin: 'com.squareup.wire'

archivesBaseName = "signal-service-java"
version          = lib_signal_service_version_number
group            = lib_signal_service_group_info

java {
    withJavadocJar()
    withSourcesJar()
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

compileJava {
    options.release = 11
}

configurations {
    ideaTestFixturesImplementation { extendsFrom testFixturesImplementation; canBeConsumed false; canBeResolved true }
}

dependencies {
    implementation libs.google.protobuf.javalite
    api libs.google.libphonenumber
    api libs.jackson.core

    implementation libs.libsignal.client
    api libs.square.okhttp3
    api libs.square.okhttp3.dnsoverhttps
    api libs.square.okio
    implementation libs.google.jsr305

    api libs.rxjava3.rxjava

    testImplementation testLibs.junit.junit
    testImplementation testLibs.assertj.core
    testImplementation testLibs.conscrypt.openjdk.uber
    testImplementation testLibs.mockito.core

    testFixturesImplementation libs.libsignal.client
    testFixturesImplementation testLibs.junit.junit
}

tasks.whenTaskAdded { task ->
    if (task.name.equals("lint")) {
        task.enabled = false
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.18.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

wire {
    kotlin {
        javaInterop = true
    }

    sourcePath {
        srcDir 'src/main/protowire'
    }
}

idea {
    module {
        generatedSourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
        scopes.COMPILE.plus += [configurations.ideaTestFixturesImplementation]
    }
}
